# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PL3pOx-o2Mc5uNps2omJOZt7OvogoGZt
"""

# 1) INSTALL DEPENDENCIES
!pip install reportlab pillow pdfplumber pymupdf pandas numpy

# 2) IMPORTS
import os, glob
import pdfplumber
import fitz               # PyMuPDF
import pandas as pd
import numpy as np
from reportlab.pdfgen import canvas
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from PIL import Image as PILImage, ImageDraw

# 3) PATHS
SAMPLE_DIR = "/mnt/data/sample_pdfs"
os.makedirs(SAMPLE_DIR, exist_ok=True)

# 4) GENERATE DIVERSE SAMPLE PDFs
# 4a) Simple multi‑line text
simple_path = os.path.join(SAMPLE_DIR, "simple_text.pdf")
c = canvas.Canvas(simple_path, pagesize=letter)
c.setFont("Helvetica", 12)
for i in range(1, 30):
    c.drawString(50, 800 - i*20, f"This is line {i} of simple text PDF.")
c.save()

# 4b) Multi‑font examples
multi_font_path = os.path.join(SAMPLE_DIR, "multi_font.pdf")
c = canvas.Canvas(multi_font_path, pagesize=letter)
styles = [("Helvetica",12),("Helvetica-Bold",14),("Times-Roman",12),("Courier",10)]
y=750
for font,size in styles:
    c.setFont(font, size)
    c.drawString(50, y, f"Sample text in {font} size {size}")
    y -= 40
c.save()

# 4c) Table
table_path = os.path.join(SAMPLE_DIR, "table.pdf")
doc = SimpleDocTemplate(table_path, pagesize=letter)
data = [["ID","Name","Score"],[1,"Alice",85],[2,"Bob",92],[3,"Charlie",78],[4,"Diana",88]]
table = Table(data, colWidths=[50,150,50])
table.setStyle(TableStyle([
    ('BACKGROUND',(0,0),(-1,0),colors.grey),
    ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
    ('ALIGN',(0,0),(-1,-1),'CENTER'),
    ('GRID',(0,0),(-1,-1),1,colors.black),
]))
elements = [Paragraph("Table Example", getSampleStyleSheet()['Heading2']), Spacer(1,12), table]
doc.build(elements)

# 4d) Image embed
img_path = os.path.join(SAMPLE_DIR, "sample_image.png")
img = PILImage.new("RGB",(200,100),color="skyblue")
draw = ImageDraw.Draw(img)
draw.text((10,40),"Test Image",fill="black")
img.save(img_path)

image_pdf_path = os.path.join(SAMPLE_DIR, "image_pdf.pdf")
c = canvas.Canvas(image_pdf_path, pagesize=letter)
c.drawImage(img_path,100,500,width=200,height=100)
c.setFont("Helvetica",12)
c.drawString(100,480,"This PDF contains an embedded image.")
c.save()

print("Sample PDFs created in:", SAMPLE_DIR)

# 5) GLOB ALL PDFs IN SAMPLE_DIR
all_pdfs = glob.glob(os.path.join(SAMPLE_DIR, "*.pdf"))
print("Found PDFs:", all_pdfs)

# 6) EXTRACTION LOOP
for PDF_PATH in all_pdfs:
    print(f"\n--- Processing: {PDF_PATH} ---")

    # 6a) Character-level
    char_records = []
    with pdfplumber.open(PDF_PATH) as pdf:
        for page_no, pg in enumerate(pdf.pages, start=1):
            for ch in pg.chars:
                char_records.append({
                    "page": page_no,
                    "text": ch["text"],
                    "fontname": ch["fontname"],
                    "size": ch["size"],
                    "x0": ch["x0"], "x1": ch["x1"],
                    "top": ch["top"], "bottom": ch["bottom"]
                })
    df_chars = pd.DataFrame(char_records)
    print(f"  → Chars: {len(df_chars)} (pages: {df_chars.page.nunique()})")

    # 6b) Block-level
    block_records = []
    doc = fitz.open(PDF_PATH)
    for idx in range(len(doc)):
        pg = doc[idx]
        for blk in pg.get_text("dict")["blocks"]:
            bbox = blk.get("bbox", None)
            if not blk.get("lines"):
                continue
            for line in blk["lines"]:
                for span in line["spans"]:
                    block_records.append({
                        "page": idx+1,
                        "text": span["text"],
                        "font": span["font"],
                        "size": span["size"],
                        "block_x0": bbox[0], "block_y0": bbox[1],
                        "block_x1": bbox[2], "block_y1": bbox[3]
                    })
    df_blocks = pd.DataFrame(block_records)
    print(f"  → Blocks: {len(df_blocks)} (pages: {df_blocks.page.nunique()})")

    # 6c) Line-level reconstruction
    df_chars["line_top"] = df_chars["top"].round().astype(int)
    lines = (
        df_chars
        .sort_values(["page","line_top","x0"])
        .groupby(["page","line_top"])["text"]
        .apply("".join)
        .reset_index(name="line_text")
    )
    print(f"  → Lines: {len(lines)}")

    # 7) SAVE CSVs
    base = os.path.splitext(os.path.basename(PDF_PATH))[0]
    df_chars.to_csv(f"{base}_chars.csv", index=False)
    df_blocks.to_csv(f"{base}_blocks.csv", index=False)
    lines.to_csv(f"{base}_lines.csv", index=False)
    print(f"  → Saved: {base}_chars.csv, {base}_blocks.csv, {base}_lines.csv")

print("\n✅ All PDFs processed and CSVs written.")